# ----------------------------------------------------------------------------
# Umami base + Umami images: only get built on master and tags
# ----------------------------------------------------------------------------

.image_build_template: &image_build_template
  script:
    # Prepare Kaniko configuration file
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    # Build and push the image from the Dockerfile at the root of the project.
    - /kaniko/executor --context $CI_PROJECT_DIR
      --dockerfile ${DOCKER_FILE}
      --build-arg ${BASE}
      --destination ${IMAGE_DESTINATION}
    # Print the full registry path of the pushed image
    - echo "Image pushed successfully to ${IMAGE_DESTINATION}"
  image:
    # We recommend using the CERN version of the Kaniko image: gitlab-registry.cern.ch/ci-tools/docker-image-builder
    name: gitlab-registry.cern.ch/ci-tools/docker-image-builder
    entrypoint: [""]
  retry: 2
  # We need to define an empty array for the dependecies to NOT include any artifacts from previous jobs
  dependencies: []

.requirement_changes: &requirement_changes
  changes:
    - requirements.txt
    - requirements_develop.txt
    - docker/umamibase/Dockerfile
    - .gitlab/workflow/.docker-gitlab-ci.yaml
    - .gitlab-ci.yml

.requirement_changes_plus: &requirement_changes_plus
  changes:
    - requirements_additional.txt
    - docker/umamibase-plus/Dockerfile
    - requirements.txt
    - requirements_develop.txt
    - docker/umamibase/Dockerfile
    - .gitlab-ci.yml

build_slim:
  <<: *image_build_template
  stage: builds
  variables:
    BASE: 'BASE_IMAGE=$SLIM_IMAGE'
    DOCKER_FILE: docker/umami-slim/Dockerfile
    IMAGE_DESTINATION: '${REGISTY_PATH}/umami-slim:latest'
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
      variables:
        IMAGE_DESTINATION: '${REGISTY_PATH}/umami-slim:$CI_COMMIT_REF_SLUG'

build_umamibase_cpu:
  <<: *image_build_template
  stage: image_build_umamibase
  variables:
    BASE: 'BASE_IMAGE=tensorflow/tensorflow:$TFTAG'
    DOCKER_FILE: docker/umamibase/Dockerfile
    IMAGE_DESTINATION: '${REGISTY_PATH}/umamibase:latest'
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      <<: *requirement_changes
    - if: $CI_COMMIT_TAG
      variables:
        IMAGE_DESTINATION: '${REGISTY_PATH}/umamibase:$CI_COMMIT_REF_SLUG'

build_umamibase_gpu:
  <<: *image_build_template
  stage: builds
  variables:
    BASE: 'BASE_IMAGE=tensorflow/tensorflow:$TFTAG-gpu'
    DOCKER_FILE: docker/umamibase/Dockerfile
    IMAGE_DESTINATION: '${REGISTY_PATH}/umamibase:latest-gpu'
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      <<: *requirement_changes
    - if: $CI_COMMIT_TAG
      variables:
        IMAGE_DESTINATION: '${REGISTY_PATH}/umamibase:$CI_COMMIT_REF_SLUG-gpu'

build_umamibase_plus_cpu:
  <<: *image_build_template
  stage: image_build_umamibase
  variables:
    BASE: 'BASE_IMAGE=${REGISTY_PATH}/umamibase:latest'
    DOCKER_FILE: docker/umamibase-plus/Dockerfile
    IMAGE_DESTINATION: '${REGISTY_PATH}/umamibase-plus:latest'
  needs:
    - job: build_umamibase_cpu
      optional: true
  dependencies:
    - build_umamibase_cpu
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      <<: *requirement_changes_plus
    - if: $CI_COMMIT_TAG
      variables:
        BASE: 'BASE_IMAGE=${REGISTY_PATH}/umamibase:$CI_COMMIT_REF_SLUG'
        IMAGE_DESTINATION: '${REGISTY_PATH}/umamibase-plus:$CI_COMMIT_REF_SLUG'

build_umamibase_plus_gpu:
  <<: *image_build_template
  stage: builds
  variables:
    BASE: 'BASE_IMAGE=${REGISTY_PATH}/umamibase:latest-gpu'
    DOCKER_FILE: docker/umamibase-plus/Dockerfile
    IMAGE_DESTINATION: '${REGISTY_PATH}/umamibase-plus:latest-gpu'
  needs:
    - job: build_umamibase_gpu
      optional: true
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      <<: *requirement_changes_plus
    - if: $CI_COMMIT_TAG
      variables:
        BASE: 'BASE_IMAGE=${REGISTY_PATH}/umamibase:$CI_COMMIT_REF_SLUG-gpu'
        IMAGE_DESTINATION: '${REGISTY_PATH}/umamibase-plus:$CI_COMMIT_REF_SLUG-gpu'

build_umamibase_gpu_pytorch:
  <<: *image_build_template
  stage: builds
  variables:
    BASE: 'BASE_IMAGE=pytorch/pytorch:$TORCHTAG'
    DOCKER_FILE: docker/umamibase/Dockerfile
    IMAGE_DESTINATION: '${REGISTY_PATH}/umamibase:latest-pytorch-gpu'
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      <<: *requirement_changes


# Umami images: use base image as a foundation to speed up build process
build_umami_cpu:
  <<: *image_build_template
  stage: image_build_umami
  variables:
    BASE: 'BASE_IMAGE=${REGISTY_PATH}/umamibase:latest'
    DOCKER_FILE: docker/umami/Dockerfile
    IMAGE_DESTINATION: '${CI_REGISTRY_IMAGE}:latest'
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
      variables:
        BASE: 'BASE_IMAGE=${REGISTY_PATH}/umamibase:$CI_COMMIT_REF_SLUG'
        IMAGE_DESTINATION: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

build_umami_gpu:
  <<: *image_build_template
  stage: image_build_umami
  variables:
    BASE: 'BASE_IMAGE=${REGISTY_PATH}/umamibase:latest-gpu'
    DOCKER_FILE: docker/umami/Dockerfile
    IMAGE_DESTINATION: '${CI_REGISTRY_IMAGE}:latest-gpu'
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
      variables:
        BASE: 'BASE_IMAGE=${REGISTY_PATH}/umamibase:$CI_COMMIT_REF_SLUG-gpu'
        IMAGE_DESTINATION: '$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-gpu'


# ----------------------------------------------------------------------------
# Umami base + Umami images: temporary images for merge request tests
# only CPU images are considered for the CI tests
# (gitlab runners don't have GPUs (yet) ...)
# indicated by "MR-" in their tag
# ----------------------------------------------------------------------------

# Base images for merge requests (MRs): used for tests in MRs,
# will be deleted on regular basis from the gitlab registry
# as they are only used for tests in the MR pipeline
build_umamibase_cpu_MR:
  <<: *image_build_template
  stage: image_build_umamibase
  variables:
    BASE: 'BASE_IMAGE=tensorflow/tensorflow:$TFTAG'
    DOCKER_FILE: docker/umamibase/Dockerfile
    IMAGE_DESTINATION: '${REGISTY_PATH}/temporary_images:${CI_MERGE_REQUEST_IID}-base'
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_PROJECT_PATH=="atlas-flavor-tagging-tools/algorithms/umami"
      <<: *requirement_changes
      variables:
        IMAGE_TYPE: temporary_images:${CI_MERGE_REQUEST_IID}-base
  after_script:
    - echo "IMAGE_TYPE=$IMAGE_TYPE" >> build.env
  artifacts:
    reports:
      dotenv: build.env

# possibility to trigger also the GPU image in a MR - but only manually
build_umamibase_gpu_MR:
  <<: *image_build_template
  stage: image_build_umamibase
  variables:
    BASE: 'BASE_IMAGE=tensorflow/tensorflow:$TFTAG-gpu'
    DOCKER_FILE: docker/umamibase/Dockerfile
    IMAGE_DESTINATION: '${REGISTY_PATH}/temporary_images:${CI_MERGE_REQUEST_IID}-gpu-base'
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_PROJECT_PATH=="atlas-flavor-tagging-tools/algorithms/umami"
      when: manual
      allow_failure: true
# ----------------------------------------------------------------------------
# Publishing:
# copies of the images built in gitlab CI/CD will be deployed to Docker Hub
# ----------------------------------------------------------------------------

.push_to_hub_template:
  stage: publish
  image: matthewfeickert/skopeo-docker:skopeo0.1.42
  variables:
    USER: btagging
    IMAGE: umami
  script:
    - /home/docker/skopeo copy
      --src-creds ${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds ${DH_USERNAME}:${DH_PASSWORD}
      docker://$CI_REGISTRY_IMAGE:${IMAGE_TAG}
      docker://${USER}/${IMAGE}:${IMAGE_TAG}

push_to_hub_cpu:
  extends: .push_to_hub_template
  variables:
    IMAGE_TAG: latest
  only:
    - master@atlas-flavor-tagging-tools/algorithms/umami

push_to_hub_gpu:
  extends: .push_to_hub_template
  variables:
    IMAGE_TAG: latest-gpu
  only:
    - master@atlas-flavor-tagging-tools/algorithms/umami

push_to_hub_tag:
  extends: .push_to_hub_template
  variables:
    IMAGE_TAG: $CI_COMMIT_REF_SLUG
  only:
    - tags@atlas-flavor-tagging-tools/algorithms/umami

push_to_hub_gpu_tag:
  extends: .push_to_hub_template
  variables:
    IMAGE_TAG: $CI_COMMIT_REF_SLUG-gpu
  only:
    - tags@atlas-flavor-tagging-tools/algorithms/umami
