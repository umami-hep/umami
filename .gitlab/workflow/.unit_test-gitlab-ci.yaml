unittest:
  stage: unit_test
  image: tensorflow/tensorflow:$TFTAG
  script:
    - pip install -r requirements.txt
    - apt-get update
    - apt-get install -y wget
    - . run_setup.sh
    - pytest ./umami/tests/unit/ -v -s
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE != "merge_request_event"

.unittest_template: &unittest_template
  stage: unit_test
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_PROJECT_PATH=="atlas-flavor-tagging-tools/algorithms/umami"
  image: '${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/umami/$IMAGE_TYPE'
  dependencies:
    - build_umamibase_cpu_MR
    - build_umamibase_cpu
    - linter
  needs:
    - job: build_umamibase_cpu_MR
      optional: true
    - job: build_umamibase_cpu
      optional: true
    - linter
  before_script:
    - . run_setup.sh
  script:
    - pytest --cov=./ --cov-report= ./umami/tests/unit/$UNIT_TEST_MODULE/ -v -s --junitxml=report.xml
    - cp .coverage coverage_files/.coverage.unittest_$UNIT_TEST_MODULE
  artifacts:
    when: always
    paths:
      - coverage_files/
    reports:
      junit: report.xml
  retry: 2

unittest_parallel:
  <<: *unittest_template
  parallel:
    matrix:
      - UNIT_TEST_MODULE:
        - evaluation_tools
        - helper_tools
        - input_vars_tools
        - preprocessing
        - tf_tools
        - train_tools
        - metrics
        - classification_tools
        - data_tools
        - plotting
