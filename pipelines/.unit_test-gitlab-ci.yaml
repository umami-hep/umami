unittest:
  stage: unit_test
  image: tensorflow/tensorflow:$TFTAG
  script:
    - pip install -r requirements.txt
    - apt-get update
    - apt-get install -y wget
    - python setup.py develop
    - pytest ./umami/tests/unit/ -v -s
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE != "merge_request_event"

.unittest_template: &unittest_template
  stage: unit_test
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_PROJECT_PATH=="atlas-flavor-tagging-tools/algorithms/umami"
  image: '${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/umami/$IMAGE_TYPE'
  dependencies:
    - linter
    - build_umamibase_cpu_MR
  before_script:
    - python setup.py develop
  script:
    - pytest --cov=./ --cov-report= ./umami/tests/unit/$UNIT_TEST_MODULE/ -v -s --junitxml=report.xml
    - cp .coverage coverage_files/.coverage.unittest_$UNIT_TEST_MODULE

  artifacts:
    when: always
    paths:
      - coverage_files/
    reports:
      junit: report.xml
  retry: 2

unittest_evaluation_tools:
  <<: *unittest_template
  variables:
    UNIT_TEST_MODULE: evaluation_tools

unittest_helper_tools:
  <<: *unittest_template
  variables:
    UNIT_TEST_MODULE: helper_tools

unittest_input_vars_tools:
  <<: *unittest_template
  variables:
    UNIT_TEST_MODULE: input_vars_tools

unittest_preprocessing:
  <<: *unittest_template
  variables:
    UNIT_TEST_MODULE: preprocessing

unittest_tf_tools:
  <<: *unittest_template
  variables:
    UNIT_TEST_MODULE: tf_tools

unittest_train_tools:
  <<: *unittest_template
  variables:
    UNIT_TEST_MODULE: train_tools

unittest_metrics:
  <<: *unittest_template
  variables:
    UNIT_TEST_MODULE: metrics

unittest_classification_tools:
  <<: *unittest_template
  variables:
    UNIT_TEST_MODULE: classification_tools

unittest_data_tools:
  <<: *unittest_template
  variables:
    UNIT_TEST_MODULE: data_tools

unittest_plotting:
  <<: *unittest_template
  variables:
    UNIT_TEST_MODULE: plotting
